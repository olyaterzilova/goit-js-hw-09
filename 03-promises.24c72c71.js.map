{"mappings":"AAoByBA,SAAhBC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAMC,iBAE2B,IAA3BC,EAAgBC,SAASH,EAAMI,OAAOC,MAAMC,OAC5CC,EAAOJ,SAASH,EAAMI,OAAOG,KAAKD,OAClCE,EAASL,SAASH,EAAMI,OAAOI,OAAOF,QAGD,SAAlCG,EAAeC,GAClBA,GAAYF,GA5BO,SAAJE,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAE4B,IAAjDC,EAAgBC,KAAKC,SAAW,GAGQC,YAAnC,WACLH,EAEkCF,EAA5B,CAAEF,WAAUL,UAGiBQ,EAA9B,CAAEH,WAAUL,S,GAEpBA,E,IAgBDa,CAAcR,EADAR,GAAiBQ,EAAW,GAAKH,GAE5CY,MAAK,SAAAC,GACJC,QAAQC,IACN,uBAA+CC,OAAtBH,EAAOV,SAAS,QAAmBa,OAAbH,EAAOf,MAAM,OAE9DI,EAAeC,EAAW,E,IAE3Bc,OAAM,SAAAC,GACLJ,QAAQC,IACN,sBAA6CC,OAArBE,EAAMf,SAAS,QAAkBa,OAAZE,EAAMpB,MAAM,OAE3DI,EAAeC,EAAW,E,IAKlCD,CAAe,E","sources":["src/js/03-promises.js"],"sourcesContent":["// Функція для створення промісів\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // Генеруємо випадкове число, щоб вирішити, чи буде проміс виконаний\n    const shouldResolve = Math.random() > 0.3;\n\n    // Встановлюємо таймер, який виконається після затримки\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Викликаємо resolve, якщо проміс має бути виконаний\n        resolve({ position, delay });\n      } else {\n        // Викликаємо reject, якщо проміс має бути відхилений\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Обробник події сабміту форми\ndocument.querySelector('.form').addEventListener('submit', function (event) {\n  event.preventDefault(); // Зупиняємо перезавантаження сторінки\n\n  const startingDelay = parseInt(event.target.delay.value); // Початкова затримка\n  const step = parseInt(event.target.step.value); // Крок збільшення затримки\n  const amount = parseInt(event.target.amount.value); // Кількість промісів\n\n  // Оголошуємо функцію, яка буде рекурсивно викликати createPromise\n  function processPromise(position) {\n    if (position <= amount) {\n      const delay = startingDelay + (position - 1) * step;\n      createPromise(position, delay)\n        .then(result => {\n          console.log(\n            `✅ Fulfilled promise ${result.position} in ${result.delay}ms`\n          );\n          processPromise(position + 1); // Виклик для наступного промісу\n        })\n        .catch(error => {\n          console.log(\n            `❌ Rejected promise ${error.position} in ${error.delay}ms`\n          );\n          processPromise(position + 1); // Виклик для наступного промісу\n        });\n    }\n  }\n\n  processPromise(1); // Виклик першого промісу\n});\n"],"names":["document","querySelector","addEventListener","event","preventDefault","startingDelay","parseInt","target","delay","value","step","amount","processPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$createPromise","then","result","console","log","concat","catch","error"],"version":3,"file":"03-promises.24c72c71.js.map"}