{"mappings":"AAoByBA,SAAhBC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAMC,iBAE2B,MAA3BC,EAAgBC,SAASH,EAAMI,OAAOC,MAAMC,OAC5CC,EAAOJ,SAASH,EAAMI,OAAOG,KAAKD,OAClCE,EAASL,SAASH,EAAMI,OAAOI,OAAOF,OAG1B,GAAdJ,EAAgB,GAAKK,EAAO,GAAKC,EAAS,EAAG,EAEJ,SAAlCC,EAAeC,GACtB,GAAIA,GAAYF,EAAQ,EA9BH,SAAJE,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,CAACC,EAASC,KAE4B,MAAjDC,EAAgBC,KAAKC,SAAW,GAGQC,YAAnC,KACLH,EAEkCF,EAA5B,C,SAAEF,E,MAAUL,IAGiBQ,EAA9B,C,SAAEH,E,MAAUL,GAAQ,GAE5BA,EAAM,G,EAkBLa,CAAcR,EADAR,GAAiBQ,EAAW,GAAKH,GAE5CY,MAAKC,IACJC,QAAQC,IACN,uBAAqBF,EAAIV,eAAoBU,EAAEf,WAEjDI,EAAeC,EAAW,EAAE,IAE7Ba,OAAMC,IACLH,QAAQC,IACN,sBAAoBE,EAAId,eAAmBc,EAAEnB,WAE/CI,EAAeC,EAAW,EAAE,G,EAMhBD,CAAL,E,MAEfY,QAAQC,IAAI,4C","sources":["src/js/03-promises.js"],"sourcesContent":["// Функція для створення промісів\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // Генеруємо випадкове число, щоб вирішити, чи буде проміс виконаний\n    const shouldResolve = Math.random() > 0.3;\n\n    // Встановлюємо таймер, який виконається після затримки\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Викликаємо resolve, якщо проміс має бути виконаний\n        resolve({ position, delay });\n      } else {\n        // Викликаємо reject, якщо проміс має бути відхилений\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Обробник події сабміту форми\ndocument.querySelector('.form').addEventListener('submit', function (event) {\n  event.preventDefault(); // Зупиняємо перезавантаження сторінки\n\n  const startingDelay = parseInt(event.target.delay.value); // Початкова затримка\n  const step = parseInt(event.target.step.value); // Крок збільшення затримки\n  const amount = parseInt(event.target.amount.value); // Кількість промісів\n\n  // Перевырка на пустоту\n  if (startingDelay > 0 && step > 0 && amount > 0) {\n    // Оголошуємо функцію, яка буде рекурсивно викликати createPromise\n    function processPromise(position) {\n      if (position <= amount) {\n        const delay = startingDelay + (position - 1) * step;\n        createPromise(position, delay)\n          .then(result => {\n            console.log(\n              `✅ Fulfilled promise ${result.position} in ${result.delay}ms`\n            );\n            processPromise(position + 1); // Виклик для наступного промісу\n          })\n          .catch(error => {\n            console.log(\n              `❌ Rejected promise ${error.position} in ${error.delay}ms`\n            );\n            processPromise(position + 1); // Виклик для наступного промісу\n          });\n      }\n    }\n\n    // Виклик першого промісу\n    processPromise(1);\n  } else {\n    console.log('Запус не можливий з мінусовими значеннями');\n  }\n});\n"],"names":["document","querySelector","addEventListener","event","preventDefault","startingDelay","parseInt","target","delay","value","step","amount","processPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$createPromise","then","result","console","log","catch","error"],"version":3,"file":"03-promises.65c12556.js.map"}